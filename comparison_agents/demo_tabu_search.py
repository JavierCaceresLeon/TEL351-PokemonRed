"""
Ejemplo de Uso del Agente Tabu Search
====================================

Este script demuestra c√≥mo usar el nuevo agente Tabu Search
y comparar su comportamiento con otros agentes.
"""

from search_algorithms.tabu_agent import TabuSearchAgent, GameScenario
import numpy as np

def demo_tabu_search_features():
    """Demostrar las caracter√≠sticas √∫nicas del Tabu Search"""
    print("üîç Demostraci√≥n del Agente Tabu Search")
    print("=" * 50)
    
    # Crear agente con configuraciones diferentes
    print("\n1. Creando agente Tabu Search...")
    agent = TabuSearchAgent(
        tabu_tenure=7,      # Mantener movimientos en lista tab√∫ por 7 iteraciones
        max_tabu_size=50,   # M√°ximo 50 movimientos en memoria
        aspiration_threshold=1.5,  # Permitir movimientos tab√∫ si calidad > 1.5x mejor
        scenario_detection_enabled=True
    )
    
    print(f"   ‚úÖ Configuraci√≥n:")
    print(f"      - Tenure Tab√∫: {agent.tabu_tenure} iteraciones")
    print(f"      - Tama√±o M√°ximo: {agent.max_tabu_size} movimientos")
    print(f"      - Umbral Aspiraci√≥n: {agent.aspiration_threshold:.1f}x")
    
    # Simular estados del juego
    print("\n2. Simulando decisiones del agente...")
    
    # Estado simulado
    mock_observation = np.random.rand(144, 160, 3)  # Imagen del Game Boy
    mock_game_state = {
        'hp': 85,
        'max_hp': 100,
        'level': 5,
        'badges': 0,
        'pcount': 0,
        'x': 10,
        'y': 15
    }
    
    # Realizar varias decisiones para demostrar la memoria tab√∫
    for i in range(10):
        action, decision_info = agent.select_action(mock_observation, mock_game_state)
        
        # Simular recompensa
        reward = np.random.uniform(-0.1, 0.5)
        agent.update_performance(action, reward, mock_observation, mock_game_state)
        
        print(f"   Paso {i+1}: Acci√≥n {action} | "
              f"Escenario: {decision_info['scenario']} | "
              f"Lista Tab√∫: {decision_info['tabu_list_size']} | "
              f"Calidad: {decision_info['selected_quality']:.3f}")
    
    # Mostrar m√©tricas de exploraci√≥n
    print("\n3. M√©tricas de exploraci√≥n:")
    metrics = agent.get_exploration_metrics()
    print(f"   üìç Posiciones √∫nicas visitadas: {metrics['unique_positions_visited']}")
    print(f"   üö∂ Visitas totales: {metrics['total_position_visits']}")
    print(f"   üìä Eficiencia exploraci√≥n: {metrics['exploration_efficiency']:.2%}")
    print(f"   üéØ Mejor calidad encontrada: {metrics['performance_metrics']['best_solution_quality']:.3f}")
    
    return agent

def compare_agents_behavior():
    """Comparar el comportamiento de diferentes agentes"""
    print("\nüÜö Comparaci√≥n de Comportamiento de Agentes")
    print("=" * 50)
    
    # Crear agentes con diferentes configuraciones
    agents = {
        "Conservador": TabuSearchAgent(tabu_tenure=10, max_tabu_size=30),
        "Agresivo": TabuSearchAgent(tabu_tenure=5, max_tabu_size=70),
        "Aspiracional": TabuSearchAgent(tabu_tenure=7, aspiration_threshold=1.2)
    }
    
    mock_observation = np.random.rand(144, 160, 3)
    mock_game_state = {'hp': 100, 'max_hp': 100, 'level': 1, 'badges': 0, 'pcount': 0}
    
    print("\nComportamiento despu√©s de 20 pasos:")
    for name, agent in agents.items():
        for _ in range(20):
            action, _ = agent.select_action(mock_observation, mock_game_state)
            agent.update_performance(action, np.random.uniform(0, 1), mock_observation, mock_game_state)
        
        metrics = agent.get_exploration_metrics()
        print(f"   {name}:")
        print(f"      - Lista Tab√∫: {len(agent.tabu_list)} movimientos")
        print(f"      - Posiciones √∫nicas: {metrics['unique_positions_visited']}")
        print(f"      - Mejor calidad: {metrics['performance_metrics']['best_solution_quality']:.3f}")

def usage_recommendations():
    """Recomendaciones de uso para diferentes situaciones"""
    print("\nüí° Recomendaciones de Uso")
    print("=" * 50)
    
    recommendations = [
        {
            "Situaci√≥n": "Exploraci√≥n inicial (comenzar el juego)",
            "Configuraci√≥n": "tabu_tenure=5, max_tabu_size=30",
            "Raz√≥n": "Permite m√°s libertad para descubrir el mapa"
        },
        {
            "Situaci√≥n": "Navegaci√≥n espec√≠fica (ir a un lugar)",
            "Configuraci√≥n": "tabu_tenure=10, aspiration_threshold=1.2",
            "Raz√≥n": "Evita volver atr√°s pero permite shortcuts"
        },
        {
            "Situaci√≥n": "Combates repetitivos",
            "Configuraci√≥n": "tabu_tenure=7, max_tabu_size=50",
            "Raz√≥n": "Balance entre memoria y flexibilidad"
        },
        {
            "Situaci√≥n": "Exploraci√≥n avanzada (mapas complejos)",
            "Configuraci√≥n": "tabu_tenure=12, max_tabu_size=70",
            "Raz√≥n": "Memoria extendida para evitar bucles largos"
        }
    ]
    
    for i, rec in enumerate(recommendations, 1):
        print(f"\n{i}. {rec['Situaci√≥n']}")
        print(f"   ‚öôÔ∏è  {rec['Configuraci√≥n']}")
        print(f"   üìù {rec['Raz√≥n']}")

def main():
    """Funci√≥n principal de demostraci√≥n"""
    print("üéÆ Demo Completo del Agente Tabu Search para Pokemon Red")
    print("üîó Ejecuta este script para entender las caracter√≠sticas √∫nicas")
    print()
    
    # Ejecutar demostraciones
    agent = demo_tabu_search_features()
    compare_agents_behavior()
    usage_recommendations()
    
    print(f"\nüìö Pr√≥ximos Pasos:")
    print(f"   1. Ejecuta: python run_tabu_interactive_metrics.py")
    print(f"   2. D√©jalo correr un rato y para con Ctrl+C")
    print(f"   3. Revisa: results/tabu_search_metrics_*.md")
    print(f"   4. Ejecuta: python generate_metrics_visualizations.py")
    print(f"   5. Compara con Epsilon Greedy y PPO")
    
    print(f"\nüîç Caracter√≠sticas √önicas del Tabu Search:")
    print(f"   ‚úÖ Evita ciclos y comportamiento repetitivo")
    print(f"   ‚úÖ Memoria de estados para navegaci√≥n inteligente")
    print(f"   ‚úÖ Criterios de aspiraci√≥n para movimientos excepcionales")
    print(f"   ‚úÖ Detecci√≥n autom√°tica de atascamiento")
    print(f"   ‚úÖ Compatible con sistema de m√©tricas unificado")

if __name__ == "__main__":
    main()