"""
Script de Prueba del Sistema de M√©tricas
=======================================

Este script permite probar r√°pidamente el sistema de m√©tricas mejorado
y verificar que todo funciona correctamente.
"""

import os
import subprocess
import time
from pathlib import Path

def test_epsilon_greedy_metrics():
    """Probar las m√©tricas del agente Epsilon Greedy"""
    print("ü§ñ Probando m√©tricas de Epsilon Greedy...")
    print("   (Se ejecutar√° por 30 segundos, luego se detendr√° autom√°ticamente)")
    
    # Cambiar al directorio correcto
    os.chdir("comparison_agents")
    
    try:
        # Ejecutar el script por un tiempo limitado
        process = subprocess.Popen(["python", "run_epsilon_greedy_interactive.py"])
        time.sleep(30)  # Ejecutar por 30 segundos
        process.terminate()
        process.wait()
        
        # Verificar que se generaron archivos
        results_dir = Path("results")
        if results_dir.exists():
            files = list(results_dir.glob("epsilon_greedy_*"))
            print(f"   ‚úÖ Generados {len(files)} archivos de m√©tricas")
            for file in files[-3:]:  # Mostrar los √∫ltimos 3
                print(f"      üìÑ {file.name}")
        else:
            print("   ‚ùå No se encontraron archivos de m√©tricas")
            
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    os.chdir("..")

def test_ppo_metrics():
    """Probar las m√©tricas del agente PPO"""
    print("\nüß† Probando m√©tricas de PPO...")
    print("   (Se ejecutar√° por 30 segundos, luego se detendr√° autom√°ticamente)")
    
    # Cambiar al directorio v2
    os.chdir("v2")
    
    try:
        # Verificar que existe el modelo
        runs_dir = Path("runs")
        if not runs_dir.exists() or not list(runs_dir.glob("*.zip")):
            print("   ‚ö†Ô∏è No se encontraron modelos PPO en v2/runs/")
            print("   üìã Para probar PPO, necesitas un modelo preentrenado")
            os.chdir("..")
            return
        
        # Ejecutar el script por un tiempo limitado
        process = subprocess.Popen(["python", "run_ppo_interactive_metrics.py"])
        time.sleep(30)  # Ejecutar por 30 segundos
        process.terminate()
        process.wait()
        
        # Verificar que se generaron archivos
        results_dir = Path("ppo_results")
        if results_dir.exists():
            files = list(results_dir.glob("ppo_*"))
            print(f"   ‚úÖ Generados {len(files)} archivos de m√©tricas")
            for file in files[-3:]:  # Mostrar los √∫ltimos 3
                print(f"      üìÑ {file.name}")
        else:
            print("   ‚ùå No se encontraron archivos de m√©tricas")
            
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    os.chdir("..")

def test_visualizations():
    """Probar el generador de visualizaciones"""
    print("\nüé® Probando generador de visualizaciones...")
    
    os.chdir("comparison_agents")
    
    try:
        # Ejecutar el generador de visualizaciones
        result = subprocess.run(["python", "generate_metrics_visualizations.py"], 
                              capture_output=True, text=True, timeout=60)
        
        if result.returncode == 0:
            print("   ‚úÖ Visualizaciones generadas exitosamente")
            
            # Verificar archivos generados
            viz_dir = Path("visualization_output")
            if viz_dir.exists():
                files = list(viz_dir.glob("*"))
                print(f"   üìä Generados {len(files)} archivos de visualizaci√≥n")
                for file in files[-3:]:
                    print(f"      üéØ {file.name}")
        else:
            print(f"   ‚ùå Error en visualizaciones: {result.stderr}")
            
    except subprocess.TimeoutExpired:
        print("   ‚è∞ Timeout - Las visualizaciones pueden tomar tiempo con muchos datos")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    os.chdir("..")

def show_directory_structure():
    """Mostrar la estructura de directorios de m√©tricas"""
    print("\nüìÅ Estructura de directorios de m√©tricas:")
    
    directories = [
        "comparison_agents/results",
        "v2/ppo_results", 
        "comparison_agents/visualization_output"
    ]
    
    for dir_path in directories:
        path = Path(dir_path)
        if path.exists():
            files = list(path.glob("*"))
            print(f"   üìÇ {dir_path}/ ({len(files)} archivos)")
            for file in files[-2:]:  # Mostrar √∫ltimos 2
                print(f"      üìÑ {file.name}")
        else:
            print(f"   üìÇ {dir_path}/ (no existe)")

def main():
    """Funci√≥n principal de prueba"""
    print("üî¨ PRUEBA DEL SISTEMA DE M√âTRICAS COMPLETO")
    print("=" * 50)
    
    # Verificar que estamos en el directorio correcto
    if not Path("comparison_agents").exists():
        print("‚ùå Ejecuta este script desde el directorio TEL351-PokemonRed/")
        return
    
    print("üìã Esta prueba:")
    print("   1. Ejecutar√° Epsilon Greedy por 30 segundos")
    print("   2. Intentar√° ejecutar PPO por 30 segundos (si hay modelo)")
    print("   3. Generar√° visualizaciones de los datos existentes")
    print("   4. Mostrar√° la estructura de archivos creada")
    
    input("\n‚è∏Ô∏è  Presiona Enter para continuar...")
    
    # Ejecutar pruebas
    test_epsilon_greedy_metrics()
    test_ppo_metrics()
    test_visualizations()
    show_directory_structure()
    
    print("\n‚úÖ PRUEBAS COMPLETADAS")
    print("\nüìö Para uso normal:")
    print("   - Ejecuta run_epsilon_greedy_interactive.py y para con Ctrl+C")
    print("   - Ejecuta v2/run_ppo_interactive_metrics.py y para con Ctrl+C")
    print("   - Ejecuta generate_metrics_visualizations.py para gr√°ficos")
    print("   - Revisa las carpetas results/ y visualization_output/")

if __name__ == "__main__":
    main()